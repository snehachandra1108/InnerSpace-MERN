{"ast":null,"code":"import { isValidElement } from 'react';\nimport { isEventKey } from './excludeEventProps';\nimport { isDataAttribute, isSvgElementPropKey } from './svgPropertiesNoEvents';\n/**\n * Filters an object to only include SVG properties, data attributes, and event handlers.\n * @param obj - The object to filter.\n * @returns A new object containing only valid SVG properties, data attributes, and event handlers.\n */\nexport function svgPropertiesAndEvents(obj) {\n  var filteredEntries = Object.entries(obj).filter(_ref => {\n    var [key] = _ref;\n    return isSvgElementPropKey(key) || isDataAttribute(key) || isEventKey(key);\n  });\n  return Object.fromEntries(filteredEntries);\n}\n\n/**\n * Function to filter SVG properties from various input types.\n * The input types can be:\n * - A record of string keys to any values, in which case it returns a record of only SVG properties\n * - A React element, in which case it returns the props of the element filtered to only SVG properties\n * - Anything else, in which case it returns null\n *\n * This function has a wide-open return type, because it will read and filter the props of an arbitrary React element.\n * This can be SVG, HTML, whatnot, with arbitrary values, so we can't type it more specifically.\n *\n * If you wish to have a type-safe version, use svgPropertiesNoEvents directly with a typed object.\n *\n * @param input - The input to filter, which can be a record, a React element, or other types.\n * @returns A record of SVG properties if the input is a record or React element, otherwise null.\n */\nexport function svgPropertiesAndEventsFromUnknown(input) {\n  if (input == null) {\n    return null;\n  }\n  if (/*#__PURE__*/isValidElement(input)) {\n    return svgPropertiesAndEvents(input.props);\n  }\n  if (typeof input === 'object' && !Array.isArray(input)) {\n    return svgPropertiesAndEvents(input);\n  }\n  return null;\n}","map":{"version":3,"names":["isValidElement","isEventKey","isDataAttribute","isSvgElementPropKey","svgPropertiesAndEvents","obj","filteredEntries","Object","entries","filter","_ref","key","fromEntries","svgPropertiesAndEventsFromUnknown","input","props","Array","isArray"],"sources":["D:/CN/MERN Project/InnerSpace/frontend/node_modules/recharts/es6/util/svgPropertiesAndEvents.js"],"sourcesContent":["import { isValidElement } from 'react';\nimport { isEventKey } from './excludeEventProps';\nimport { isDataAttribute, isSvgElementPropKey } from './svgPropertiesNoEvents';\n/**\n * Filters an object to only include SVG properties, data attributes, and event handlers.\n * @param obj - The object to filter.\n * @returns A new object containing only valid SVG properties, data attributes, and event handlers.\n */\nexport function svgPropertiesAndEvents(obj) {\n  var filteredEntries = Object.entries(obj).filter(_ref => {\n    var [key] = _ref;\n    return isSvgElementPropKey(key) || isDataAttribute(key) || isEventKey(key);\n  });\n  return Object.fromEntries(filteredEntries);\n}\n\n/**\n * Function to filter SVG properties from various input types.\n * The input types can be:\n * - A record of string keys to any values, in which case it returns a record of only SVG properties\n * - A React element, in which case it returns the props of the element filtered to only SVG properties\n * - Anything else, in which case it returns null\n *\n * This function has a wide-open return type, because it will read and filter the props of an arbitrary React element.\n * This can be SVG, HTML, whatnot, with arbitrary values, so we can't type it more specifically.\n *\n * If you wish to have a type-safe version, use svgPropertiesNoEvents directly with a typed object.\n *\n * @param input - The input to filter, which can be a record, a React element, or other types.\n * @returns A record of SVG properties if the input is a record or React element, otherwise null.\n */\nexport function svgPropertiesAndEventsFromUnknown(input) {\n  if (input == null) {\n    return null;\n  }\n  if (/*#__PURE__*/isValidElement(input)) {\n    return svgPropertiesAndEvents(input.props);\n  }\n  if (typeof input === 'object' && !Array.isArray(input)) {\n    return svgPropertiesAndEvents(input);\n  }\n  return null;\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,OAAO;AACtC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,yBAAyB;AAC9E;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,GAAG,EAAE;EAC1C,IAAIC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,CAACC,IAAI,IAAI;IACvD,IAAI,CAACC,GAAG,CAAC,GAAGD,IAAI;IAChB,OAAOP,mBAAmB,CAACQ,GAAG,CAAC,IAAIT,eAAe,CAACS,GAAG,CAAC,IAAIV,UAAU,CAACU,GAAG,CAAC;EAC5E,CAAC,CAAC;EACF,OAAOJ,MAAM,CAACK,WAAW,CAACN,eAAe,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,iCAAiCA,CAACC,KAAK,EAAE;EACvD,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,IAAI;EACb;EACA,IAAI,aAAad,cAAc,CAACc,KAAK,CAAC,EAAE;IACtC,OAAOV,sBAAsB,CAACU,KAAK,CAACC,KAAK,CAAC;EAC5C;EACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IACtD,OAAOV,sBAAsB,CAACU,KAAK,CAAC;EACtC;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}