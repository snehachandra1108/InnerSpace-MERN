{"ast":null,"code":"import { createSlice, current, prepareAutoBatched } from '@reduxjs/toolkit';\nimport { castDraft } from 'immer';\n\n/**\n * One Tooltip can display multiple TooltipPayloadEntries at a time.\n */\n\n/**\n * So what happens is that the tooltip payload is decided based on the available data, and the dataKey.\n * The dataKey can either be defined on the graphical element (like Line, or Bar)\n * or on the tooltip itself.\n *\n * The data can be defined in the chart element, or in the graphical item.\n *\n * So this type is all the settings, other than the data + dataKey complications.\n */\n\n/**\n * This is what Tooltip renders.\n */\n\n/**\n * null means no active index\n * string means: whichever index from the chart data it is.\n * Different charts have different requirements on data shapes,\n * and are also responsible for providing a function that will accept this index\n * and return data.\n */\n\n/**\n * Different items have different data shapes so the state has no opinion on what the data shape should be;\n * the only requirement is that the chart also provides a searcher function\n * that accepts the data, and a key, and returns whatever the payload in Tooltip should be.\n */\n\n/**\n * So this informs the \"tooltip event type\". Tooltip event type can be either \"axis\" or \"item\"\n * and it is used for two things:\n * 1. Sets the active area\n * 2. Sets the background and cursor highlights\n *\n * Some charts only allow to have one type of tooltip event type, some allow both.\n * Those charts that allow both will have one default, and the \"shared\" prop will be used to switch between them.\n * Undefined means \"use the chart default\".\n *\n * Charts that only allow one tooltip event type, will ignore the shared prop.\n */\n\n/**\n * A generic state for user interaction with the chart.\n * User interaction can come through multiple channels: mouse events, keyboard events, or hardcoded in props, or synchronised from other charts.\n *\n * Each of the interaction states is represented as TooltipInteractionState,\n * and then the selectors and Tooltip will decide which of the interaction states to use.\n */\n\nexport var noInteraction = {\n  active: false,\n  index: null,\n  dataKey: undefined,\n  coordinate: undefined\n};\n\n/**\n * The tooltip interaction state stores:\n *\n * - Which graphical item is user interacting with at the moment,\n * - which axis (or, which part of chart background) is user interacting with at the moment\n * - The data that individual graphical items wish to be displayed in case the tooltip gets activated\n */\n\nexport var initialState = {\n  itemInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  axisInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  keyboardInteraction: noInteraction,\n  syncInteraction: {\n    active: false,\n    index: null,\n    dataKey: undefined,\n    label: undefined,\n    coordinate: undefined,\n    sourceViewBox: undefined\n  },\n  tooltipItemPayloads: [],\n  settings: {\n    shared: undefined,\n    trigger: 'hover',\n    axisId: 0,\n    active: false,\n    defaultIndex: undefined\n  }\n};\nvar tooltipSlice = createSlice({\n  name: 'tooltip',\n  initialState,\n  reducers: {\n    addTooltipEntrySettings: {\n      reducer(state, action) {\n        state.tooltipItemPayloads.push(castDraft(action.payload));\n      },\n      prepare: prepareAutoBatched()\n    },\n    removeTooltipEntrySettings: {\n      reducer(state, action) {\n        var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));\n        if (index > -1) {\n          state.tooltipItemPayloads.splice(index, 1);\n        }\n      },\n      prepare: prepareAutoBatched()\n    },\n    setTooltipSettingsState(state, action) {\n      state.settings = action.payload;\n    },\n    setActiveMouseOverItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.hover.active = true;\n      state.itemInteraction.hover.index = action.payload.activeIndex;\n      state.itemInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    mouseLeaveChart(state) {\n      /*\n       * Clear only the active flags. Why?\n       * 1. Keep Coordinate to preserve animation - next time the Tooltip appears, we want to render it from\n       * the last place where it was when it disappeared.\n       * 2. We want to keep all the properties anyway just in case the tooltip has `active=true` prop\n       * and continues being visible even after the mouse has left the chart.\n       */\n      state.itemInteraction.hover.active = false;\n      state.axisInteraction.hover.active = false;\n    },\n    mouseLeaveItem(state) {\n      state.itemInteraction.hover.active = false;\n    },\n    setActiveClickItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.itemInteraction.click.active = true;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.click.index = action.payload.activeIndex;\n      state.itemInteraction.click.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseOverAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.axisInteraction.hover.active = true;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.hover.index = action.payload.activeIndex;\n      state.axisInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseClickAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.click.active = true;\n      state.axisInteraction.click.index = action.payload.activeIndex;\n      state.axisInteraction.click.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setSyncInteraction(state, action) {\n      state.syncInteraction = action.payload;\n    },\n    setKeyboardInteraction(state, action) {\n      state.keyboardInteraction.active = action.payload.active;\n      state.keyboardInteraction.index = action.payload.activeIndex;\n      state.keyboardInteraction.coordinate = action.payload.activeCoordinate;\n      state.keyboardInteraction.dataKey = action.payload.activeDataKey;\n    }\n  }\n});\nexport var {\n  addTooltipEntrySettings,\n  removeTooltipEntrySettings,\n  setTooltipSettingsState,\n  setActiveMouseOverItemIndex,\n  mouseLeaveItem,\n  mouseLeaveChart,\n  setActiveClickItemIndex,\n  setMouseOverAxisIndex,\n  setMouseClickAxisIndex,\n  setSyncInteraction,\n  setKeyboardInteraction\n} = tooltipSlice.actions;\nexport var tooltipReducer = tooltipSlice.reducer;","map":{"version":3,"names":["createSlice","current","prepareAutoBatched","castDraft","noInteraction","active","index","dataKey","undefined","coordinate","initialState","itemInteraction","click","hover","axisInteraction","keyboardInteraction","syncInteraction","label","sourceViewBox","tooltipItemPayloads","settings","shared","trigger","axisId","defaultIndex","tooltipSlice","name","reducers","addTooltipEntrySettings","reducer","state","action","push","payload","prepare","removeTooltipEntrySettings","indexOf","splice","setTooltipSettingsState","setActiveMouseOverItemIndex","activeIndex","activeDataKey","activeCoordinate","mouseLeaveChart","mouseLeaveItem","setActiveClickItemIndex","setMouseOverAxisIndex","setMouseClickAxisIndex","setSyncInteraction","setKeyboardInteraction","actions","tooltipReducer"],"sources":["D:/CN/MERN Project/InnerSpace/frontend/node_modules/recharts/es6/state/tooltipSlice.js"],"sourcesContent":["import { createSlice, current, prepareAutoBatched } from '@reduxjs/toolkit';\nimport { castDraft } from 'immer';\n\n/**\n * One Tooltip can display multiple TooltipPayloadEntries at a time.\n */\n\n/**\n * So what happens is that the tooltip payload is decided based on the available data, and the dataKey.\n * The dataKey can either be defined on the graphical element (like Line, or Bar)\n * or on the tooltip itself.\n *\n * The data can be defined in the chart element, or in the graphical item.\n *\n * So this type is all the settings, other than the data + dataKey complications.\n */\n\n/**\n * This is what Tooltip renders.\n */\n\n/**\n * null means no active index\n * string means: whichever index from the chart data it is.\n * Different charts have different requirements on data shapes,\n * and are also responsible for providing a function that will accept this index\n * and return data.\n */\n\n/**\n * Different items have different data shapes so the state has no opinion on what the data shape should be;\n * the only requirement is that the chart also provides a searcher function\n * that accepts the data, and a key, and returns whatever the payload in Tooltip should be.\n */\n\n/**\n * So this informs the \"tooltip event type\". Tooltip event type can be either \"axis\" or \"item\"\n * and it is used for two things:\n * 1. Sets the active area\n * 2. Sets the background and cursor highlights\n *\n * Some charts only allow to have one type of tooltip event type, some allow both.\n * Those charts that allow both will have one default, and the \"shared\" prop will be used to switch between them.\n * Undefined means \"use the chart default\".\n *\n * Charts that only allow one tooltip event type, will ignore the shared prop.\n */\n\n/**\n * A generic state for user interaction with the chart.\n * User interaction can come through multiple channels: mouse events, keyboard events, or hardcoded in props, or synchronised from other charts.\n *\n * Each of the interaction states is represented as TooltipInteractionState,\n * and then the selectors and Tooltip will decide which of the interaction states to use.\n */\n\nexport var noInteraction = {\n  active: false,\n  index: null,\n  dataKey: undefined,\n  coordinate: undefined\n};\n\n/**\n * The tooltip interaction state stores:\n *\n * - Which graphical item is user interacting with at the moment,\n * - which axis (or, which part of chart background) is user interacting with at the moment\n * - The data that individual graphical items wish to be displayed in case the tooltip gets activated\n */\n\nexport var initialState = {\n  itemInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  axisInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  keyboardInteraction: noInteraction,\n  syncInteraction: {\n    active: false,\n    index: null,\n    dataKey: undefined,\n    label: undefined,\n    coordinate: undefined,\n    sourceViewBox: undefined\n  },\n  tooltipItemPayloads: [],\n  settings: {\n    shared: undefined,\n    trigger: 'hover',\n    axisId: 0,\n    active: false,\n    defaultIndex: undefined\n  }\n};\nvar tooltipSlice = createSlice({\n  name: 'tooltip',\n  initialState,\n  reducers: {\n    addTooltipEntrySettings: {\n      reducer(state, action) {\n        state.tooltipItemPayloads.push(castDraft(action.payload));\n      },\n      prepare: prepareAutoBatched()\n    },\n    removeTooltipEntrySettings: {\n      reducer(state, action) {\n        var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));\n        if (index > -1) {\n          state.tooltipItemPayloads.splice(index, 1);\n        }\n      },\n      prepare: prepareAutoBatched()\n    },\n    setTooltipSettingsState(state, action) {\n      state.settings = action.payload;\n    },\n    setActiveMouseOverItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.hover.active = true;\n      state.itemInteraction.hover.index = action.payload.activeIndex;\n      state.itemInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    mouseLeaveChart(state) {\n      /*\n       * Clear only the active flags. Why?\n       * 1. Keep Coordinate to preserve animation - next time the Tooltip appears, we want to render it from\n       * the last place where it was when it disappeared.\n       * 2. We want to keep all the properties anyway just in case the tooltip has `active=true` prop\n       * and continues being visible even after the mouse has left the chart.\n       */\n      state.itemInteraction.hover.active = false;\n      state.axisInteraction.hover.active = false;\n    },\n    mouseLeaveItem(state) {\n      state.itemInteraction.hover.active = false;\n    },\n    setActiveClickItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.itemInteraction.click.active = true;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.click.index = action.payload.activeIndex;\n      state.itemInteraction.click.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseOverAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.axisInteraction.hover.active = true;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.hover.index = action.payload.activeIndex;\n      state.axisInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseClickAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.click.active = true;\n      state.axisInteraction.click.index = action.payload.activeIndex;\n      state.axisInteraction.click.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setSyncInteraction(state, action) {\n      state.syncInteraction = action.payload;\n    },\n    setKeyboardInteraction(state, action) {\n      state.keyboardInteraction.active = action.payload.active;\n      state.keyboardInteraction.index = action.payload.activeIndex;\n      state.keyboardInteraction.coordinate = action.payload.activeCoordinate;\n      state.keyboardInteraction.dataKey = action.payload.activeDataKey;\n    }\n  }\n});\nexport var {\n  addTooltipEntrySettings,\n  removeTooltipEntrySettings,\n  setTooltipSettingsState,\n  setActiveMouseOverItemIndex,\n  mouseLeaveItem,\n  mouseLeaveChart,\n  setActiveClickItemIndex,\n  setMouseOverAxisIndex,\n  setMouseClickAxisIndex,\n  setSyncInteraction,\n  setKeyboardInteraction\n} = tooltipSlice.actions;\nexport var tooltipReducer = tooltipSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}