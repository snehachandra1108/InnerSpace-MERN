{"ast":null,"code":"import { createSlice, current, prepareAutoBatched } from '@reduxjs/toolkit';\nimport { castDraft } from 'immer';\n\n/**\n * The properties inside this state update independently of each other and quite often.\n * When selecting, never select the whole state because you are going to get\n * unnecessary re-renders. Select only the properties you need.\n *\n * This is why this state type is not exported - don't use it directly.\n */\n\nvar initialState = {\n  settings: {\n    layout: 'horizontal',\n    align: 'center',\n    verticalAlign: 'middle',\n    itemSorter: 'value'\n  },\n  size: {\n    width: 0,\n    height: 0\n  },\n  payload: []\n};\nvar legendSlice = createSlice({\n  name: 'legend',\n  initialState,\n  reducers: {\n    setLegendSize(state, action) {\n      state.size.width = action.payload.width;\n      state.size.height = action.payload.height;\n    },\n    setLegendSettings(state, action) {\n      state.settings.align = action.payload.align;\n      state.settings.layout = action.payload.layout;\n      state.settings.verticalAlign = action.payload.verticalAlign;\n      state.settings.itemSorter = action.payload.itemSorter;\n    },\n    addLegendPayload: {\n      reducer(state, action) {\n        state.payload.push(castDraft(action.payload));\n      },\n      prepare: prepareAutoBatched()\n    },\n    removeLegendPayload: {\n      reducer(state, action) {\n        var index = current(state).payload.indexOf(castDraft(action.payload));\n        if (index > -1) {\n          state.payload.splice(index, 1);\n        }\n      },\n      prepare: prepareAutoBatched()\n    }\n  }\n});\nexport var {\n  setLegendSize,\n  setLegendSettings,\n  addLegendPayload,\n  removeLegendPayload\n} = legendSlice.actions;\nexport var legendReducer = legendSlice.reducer;","map":{"version":3,"names":["createSlice","current","prepareAutoBatched","castDraft","initialState","settings","layout","align","verticalAlign","itemSorter","size","width","height","payload","legendSlice","name","reducers","setLegendSize","state","action","setLegendSettings","addLegendPayload","reducer","push","prepare","removeLegendPayload","index","indexOf","splice","actions","legendReducer"],"sources":["D:/CN/MERN Project/InnerSpace/frontend/node_modules/recharts/es6/state/legendSlice.js"],"sourcesContent":["import { createSlice, current, prepareAutoBatched } from '@reduxjs/toolkit';\nimport { castDraft } from 'immer';\n\n/**\n * The properties inside this state update independently of each other and quite often.\n * When selecting, never select the whole state because you are going to get\n * unnecessary re-renders. Select only the properties you need.\n *\n * This is why this state type is not exported - don't use it directly.\n */\n\nvar initialState = {\n  settings: {\n    layout: 'horizontal',\n    align: 'center',\n    verticalAlign: 'middle',\n    itemSorter: 'value'\n  },\n  size: {\n    width: 0,\n    height: 0\n  },\n  payload: []\n};\nvar legendSlice = createSlice({\n  name: 'legend',\n  initialState,\n  reducers: {\n    setLegendSize(state, action) {\n      state.size.width = action.payload.width;\n      state.size.height = action.payload.height;\n    },\n    setLegendSettings(state, action) {\n      state.settings.align = action.payload.align;\n      state.settings.layout = action.payload.layout;\n      state.settings.verticalAlign = action.payload.verticalAlign;\n      state.settings.itemSorter = action.payload.itemSorter;\n    },\n    addLegendPayload: {\n      reducer(state, action) {\n        state.payload.push(castDraft(action.payload));\n      },\n      prepare: prepareAutoBatched()\n    },\n    removeLegendPayload: {\n      reducer(state, action) {\n        var index = current(state).payload.indexOf(castDraft(action.payload));\n        if (index > -1) {\n          state.payload.splice(index, 1);\n        }\n      },\n      prepare: prepareAutoBatched()\n    }\n  }\n});\nexport var {\n  setLegendSize,\n  setLegendSettings,\n  addLegendPayload,\n  removeLegendPayload\n} = legendSlice.actions;\nexport var legendReducer = legendSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC3E,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG;EACjBC,QAAQ,EAAE;IACRC,MAAM,EAAE,YAAY;IACpBC,KAAK,EAAE,QAAQ;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE;EACd,CAAC;EACDC,IAAI,EAAE;IACJC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACV,CAAC;EACDC,OAAO,EAAE;AACX,CAAC;AACD,IAAIC,WAAW,GAAGd,WAAW,CAAC;EAC5Be,IAAI,EAAE,QAAQ;EACdX,YAAY;EACZY,QAAQ,EAAE;IACRC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAACR,IAAI,CAACC,KAAK,GAAGQ,MAAM,CAACN,OAAO,CAACF,KAAK;MACvCO,KAAK,CAACR,IAAI,CAACE,MAAM,GAAGO,MAAM,CAACN,OAAO,CAACD,MAAM;IAC3C,CAAC;IACDQ,iBAAiBA,CAACF,KAAK,EAAEC,MAAM,EAAE;MAC/BD,KAAK,CAACb,QAAQ,CAACE,KAAK,GAAGY,MAAM,CAACN,OAAO,CAACN,KAAK;MAC3CW,KAAK,CAACb,QAAQ,CAACC,MAAM,GAAGa,MAAM,CAACN,OAAO,CAACP,MAAM;MAC7CY,KAAK,CAACb,QAAQ,CAACG,aAAa,GAAGW,MAAM,CAACN,OAAO,CAACL,aAAa;MAC3DU,KAAK,CAACb,QAAQ,CAACI,UAAU,GAAGU,MAAM,CAACN,OAAO,CAACJ,UAAU;IACvD,CAAC;IACDY,gBAAgB,EAAE;MAChBC,OAAOA,CAACJ,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACL,OAAO,CAACU,IAAI,CAACpB,SAAS,CAACgB,MAAM,CAACN,OAAO,CAAC,CAAC;MAC/C,CAAC;MACDW,OAAO,EAAEtB,kBAAkB,CAAC;IAC9B,CAAC;IACDuB,mBAAmB,EAAE;MACnBH,OAAOA,CAACJ,KAAK,EAAEC,MAAM,EAAE;QACrB,IAAIO,KAAK,GAAGzB,OAAO,CAACiB,KAAK,CAAC,CAACL,OAAO,CAACc,OAAO,CAACxB,SAAS,CAACgB,MAAM,CAACN,OAAO,CAAC,CAAC;QACrE,IAAIa,KAAK,GAAG,CAAC,CAAC,EAAE;UACdR,KAAK,CAACL,OAAO,CAACe,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QAChC;MACF,CAAC;MACDF,OAAO,EAAEtB,kBAAkB,CAAC;IAC9B;EACF;AACF,CAAC,CAAC;AACF,OAAO,IAAI;EACTe,aAAa;EACbG,iBAAiB;EACjBC,gBAAgB;EAChBI;AACF,CAAC,GAAGX,WAAW,CAACe,OAAO;AACvB,OAAO,IAAIC,aAAa,GAAGhB,WAAW,CAACQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}