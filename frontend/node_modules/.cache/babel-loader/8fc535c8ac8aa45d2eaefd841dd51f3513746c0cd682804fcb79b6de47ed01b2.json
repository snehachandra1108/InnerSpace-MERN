{"ast":null,"code":"var _jsxFileName = \"D:\\\\CN\\\\MERN Project\\\\InnerSpace\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getJournals } from \"../services/journalService\";\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#A28BFF\", \"#FF6B8A\"];\nconst Dashboard = () => {\n  _s();\n  const [journals, setJournals] = useState([]);\n  const [avgStress, setAvgStress] = useState(0);\n  const [moodData, setMoodData] = useState([]);\n  const fetchData = async () => {\n    try {\n      const res = await getJournals();\n      const data = res.data.data;\n      setJournals(data);\n\n      // Calculate average stress\n      if (data.length > 0) {\n        const totalStress = data.reduce((sum, j) => sum + j.stressLevel, 0);\n        setAvgStress((totalStress / data.length).toFixed(2));\n      }\n\n      // Calculate mood distribution\n      const moodCount = {};\n      data.forEach(j => {\n        moodCount[j.mood] = (moodCount[j.mood] || 0) + 1;\n      });\n      const moodArray = Object.keys(moodCount).map(key => ({\n        name: key,\n        value: moodCount[key]\n      }));\n      setMoodData(moodArray);\n    } catch (err) {\n      console.error(\"Error fetching journals:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [journals.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"700px\",\n      margin: \"20px auto\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MindSpace Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Average Stress Level: \", avgStress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: moodData,\n            dataKey: \"value\",\n            nameKey: \"name\",\n            cx: \"50%\",\n            cy: \"50%\",\n            outerRadius: 100,\n            fill: \"#8884d8\",\n            label: true,\n            children: moodData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"cGX5wLWXaKDAB/dI+BfBBAueOw0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","getJournals","PieChart","Pie","Cell","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","COLORS","Dashboard","_s","journals","setJournals","avgStress","setAvgStress","moodData","setMoodData","fetchData","res","data","length","totalStress","reduce","sum","j","stressLevel","toFixed","moodCount","forEach","mood","moodArray","Object","keys","map","key","name","value","err","console","error","style","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","dataKey","nameKey","cx","cy","outerRadius","fill","label","entry","index","_c","$RefreshReg$"],"sources":["D:/CN/MERN Project/InnerSpace/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getJournals } from \"../services/journalService\";\r\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#A28BFF\", \"#FF6B8A\"];\r\n\r\nconst Dashboard = () => {\r\n  const [journals, setJournals] = useState([]);\r\n  const [avgStress, setAvgStress] = useState(0);\r\n  const [moodData, setMoodData] = useState([]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await getJournals();\r\n      const data = res.data.data;\r\n      setJournals(data);\r\n\r\n      // Calculate average stress\r\n      if (data.length > 0) {\r\n        const totalStress = data.reduce((sum, j) => sum + j.stressLevel, 0);\r\n        setAvgStress((totalStress / data.length).toFixed(2));\r\n      }\r\n\r\n      // Calculate mood distribution\r\n      const moodCount = {};\r\n      data.forEach((j) => {\r\n        moodCount[j.mood] = (moodCount[j.mood] || 0) + 1;\r\n      });\r\n      const moodArray = Object.keys(moodCount).map((key) => ({\r\n        name: key,\r\n        value: moodCount[key],\r\n      }));\r\n      setMoodData(moodArray);\r\n    } catch (err) {\r\n      console.error(\"Error fetching journals:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [journals.length]);\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"700px\", margin: \"20px auto\", textAlign: \"center\" }}>\r\n      <h2>MindSpace Dashboard</h2>\r\n\r\n      <div style={{ margin: \"20px 0\" }}>\r\n        <h3>Average Stress Level: {avgStress}</h3>\r\n      </div>\r\n\r\n      <div style={{ width: \"100%\", height: 300 }}>\r\n        <ResponsiveContainer>\r\n          <PieChart>\r\n            <Pie\r\n              data={moodData}\r\n              dataKey=\"value\"\r\n              nameKey=\"name\"\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={100}\r\n              fill=\"#8884d8\"\r\n              label\r\n            >\r\n              {moodData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip />\r\n            <Legend />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}